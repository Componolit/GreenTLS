initial: START
final: FINAL
states:
  - name: START
    desc:
      - Set client_sequence_number := 0
      - Set server_sequence_number := 0
      - Set record_protection := False
      - Set network_receive_enabled := True
      - Set network_send_enabled := True
      - Set heartbeat_receive_enabled := False
      - Set heartbeat_send_enabled := False
    data:
      - name: client_sequence_number
        access: w
      - name: server_sequence_number
        access: w
      - name: record_protection
        access: w
      - name: network_receive_enabled
        access: w
      - name: network_send_enabled
        access: w
      - name: heartbeat_receive_enabled
        access: w
      - name: heartbeat_send_enabled
        access: w
    transitions:
      - target: IDLE

  - name: IDLE
    transitions:
      - target: IDLE.MESSAGE
  - name: IDLE.MESSAGE
    desc:
      - Check for message from control layer
    transitions:
      - target: CONTROL
        condition: control message received
      - target: IDLE.KEY_UPDATE
    channels:
      - name: control_in
        access: r
  - name: IDLE.KEY_UPDATE
    desc:
      - Check for message from key management
    channels:
      - name: key_in
        access: r
    transitions:
      - target: KEY_UPDATE
        condition: key message received
      - target: IDLE.HANDSHAKE
  - name: IDLE.HANDSHAKE
    desc:
      - Check for message from Handshake layer
    channels:
      - name: handshake_in
        access: r
    transitions:
      - target: HANDSHAKE
        condition: handshake message received
      - target: IDLE.NETWORK
  - name: IDLE.NETWORK
    desc:
      - Check for message from network layer
    channels:
      - name: network_in
        access: r
    data:
      - name: network_receive_enabled
        access: r
      - name: network_send_enabled
        access: r
    transitions:
      - target: NETWORK_IN
        condition: message received and network_receive_enabled == True
      - target: IDLE.APPLICATION
  - name: IDLE.APPLICATION
    desc:
      - Check for message from client application
    channels:
      - name: application_in
        access: r
    transitions:
      - target: NETWORK_OUT.APPLICATION
        condition: message received
      - target: IDLE.HEARTBEAT
  - name: IDLE.HEARTBEAT
    desc:
      - Check for message from heartbeat component
    channels:
      - name: heartbeat_in
        access: r
    data:
      - name: heartbeat_send_enabled
        access: r
    transitions:
      - target: HEARTBEAT
        condition: message received and heartbeat_send_enabled == True
      - target: IDLE.HEARTBEAT_CONTROL
  - name: IDLE.HEARTBEAT_CONTROL
    desc:
      - Check for message from heartbeat_control component
    channels:
      - name: heartbeat_control_in
        access: r
    transitions:
      - target: HEARTBEAT_CONTROL
        condition: message received
      - target: IDLE

  - name: CONTROL
    desc:
      - Read ControlMessage from control_in
      - Parse ControlMessage
    channels:
      - name: control_in
        access: r
    data:
      - name: ControlMessage
        access: rw
    transitions:
      - target: SHUTDOWN
        condition: shutdown message

  - name: SHUTDOWN
    desc:
      - Send close_notify alert on network_out
      - Set network_send_enabled := False
    channels:
      - name: network_out
        access: w
    data:
      - name: network_send_enabled
        access: w
    transitions:
      - target: FINAL

  - name: KEY_UPDATE
    desc:
      - Read KeyMessage from key_in
      - Parse KeyMessage
    channels:
      - name: key_in
        access: r
    data:
      - name: KeyMessage
        access: rw
    transitions:
      - target: KEY_UPDATE.CLIENT
        condition: key update message for client
      - target: KEY_UPDATE.SERVER
        condition: key update message for server

  - name: KEY_UPDATE.CLIENT
    desc:
      - Read client_write_key from KeyMessage
      - Set client_sequence_number := 0
      - Set record_protection := True
    data:
      - name: KeyMessage
        access: r
      - name: client_write_key
        access: w
      - name: client_sequence_number
        access: w
      - name: record_protection
        access: w
    transitions:
      - target: IDLE

  - name: KEY_UPDATE.SERVER
    desc:
      - Read server_write_key from KeyMessage
      - Set server_sequence_number := 0
    data:
      - name: KeyMessage
        access: r
      - name: server_write_key
        access: w
      - name: server_sequence_number
        access: w
    transitions:
      - target: IDLE

  - name: HANDSHAKE
    desc:
      - Read TLSRecord from handshake_in
    channels:
      - name: handshake_in
        access: r
    data:
      - name: NETWORK_OUT.TLSRecord
        access: w
      - name: record_protection
        access: r
    transitions:
      - target: NETWORK_OUT.SEND
        condition: record_protection == False and network_send_enabled == True
      - target: NETWORK_OUT.ENCRYPT_AND_SEND
        condition: record_protection == True and network_send_enabled == True
      - target: IDLE
        condition: network_send_enabled == False

  - name: NETWORK_IN
    desc:
      - Read TLSRecord from network_in
      - Check record type
    channels:
      - name: network_in
        access: r
    data:
      - name: NETWORK_IN.TLSRecord
        access: w
      - name: heartbeat_receive_enabled
        access: r
    transitions:
      - target: NETWORK_IN.DECRYPT
        condition: type == application_data
      - target: NETWORK_IN.PARSE
        condition: type == alert or type == handshake
      - target: NETWORK_IN.HANDSHAKE
        condition: type == change_cipher_spec
      - target: NETWORK_IN.HEARTBEAT
        condition: type == heartbeat and heartbeat_receive_enabled == True
      - target: ERROR
        condition: invalid record
      - target: IDLE

  - name: NETWORK_IN.DECRYPT
    desc:
      - Decrypt TLSRecord to TLSInnerPlaintext with server_write_key
    data:
      - name: server_write_key
        access: r
      - name: NETWORK_IN.TLSRecord
        access: rw
      - name: TLSInnerPlaintext
        access: rw
    transitions:
      - target: ERROR
        condition: no server_write_key available
      - target: ERROR
        condition: decryption failed
      - target: NETWORK_IN.DECRYPT.VERIFICATION
        condition: decryption successful
  - name: NETWORK_IN.DECRYPT.VERIFICATION
    desc:
      - Verify TLSInnerPlaintext
    data:
      - name: TLSInnerPlaintext
        access: r
    transitions:
      - target: ERROR
        condition: Handshake or Alert record with zero-length TLSInnerPlaintext.content
      - target: ERROR
        condition: only padding, no type field found
      - target: NETWORK_IN.DECRYPT.TRANSFORM
        condition: verification successful
  - name: NETWORK_IN.DECRYPT.TRANSFORM
    desc:
      - Transform TLSInnerPlaintext to TLSRecord
      - Increment server_sequence_number
    data:
      - name: TLSInnerPlaintext
        access: r
      - name: NETWORK_IN.TLSRecord
        access: w
      - name: server_sequence_number
        access: rw
    transitions:
      - target: NETWORK_IN.PARSE

  - name: NETWORK_IN.PARSE
    desc:
      - Parse TLSRecord
    data:
      - name: NETWORK_IN.TLSRecord
        access: r
    transitions:
      - target: NETWORK_IN.APPLICATION
        condition: type == application_data
      - target: NETWORK_IN.HANDSHAKE
        condition: type == handshake
      - target: NETWORK_IN.ALERT
        condition: type == alert
      - target: ERROR
        condition: type == change_cipher_spec
      - target: ERROR
        condition: invalid type
      - target: IDLE

  - name: NETWORK_IN.APPLICATION
    desc:
      - Write TLSRecord.content to application_out
    channels:
      - name: application_out
        access: w
    data:
      - name: NETWORK_IN.TLSRecord
        access: r
    transitions:
      - target: IDLE

  - name: NETWORK_IN.HANDSHAKE
    desc:
      - Write TLSRecord.content to handshake_out
    channels:
      - name: handshake_out
        access: w
    data:
      - name: NETWORK_IN.TLSRecord
        access: r
    transitions:
      - target: IDLE

  - name: NETWORK_IN.HEARTBEAT
    desc:
      - Write TLSRecord to heartbeat_out
    channels:
      - name: heartbeat_out
        access: w
    data:
      - name: NETWORK_IN.TLSRecord
        access: r
    transitions:
      - target: IDLE

  - name: NETWORK_IN.ALERT
    desc:
      - Parse TLSRecord as alert message
      - Check type
    data:
      - name: NETWORK_IN.TLSRecord
        access: r
    transitions:
      - target: NETWORK_IN.ALERT.CLOSE
        condition: type == close_notify
      - target: NETWORK_IN.ALERT.TERMINATE
        condition: type != close_notify

  - name: NETWORK_IN.ALERT.CLOSE
    desc:
      - Set network_receive_enabled := False
      - Send alert to control_out
    channels:
      - name: control_out
        access: w
    data:
      - name: network_receive_enabled
        access: w
    transitions:
      - target: IDLE

  - name: NETWORK_IN.ALERT.TERMINATE
    desc:
      - Send alert to control_out
    channels:
      - name: control_out
        access: w
    transitions:
      - target: ERROR

  - name: NETWORK_OUT.APPLICATION
    desc:
      - Read ApplicationMessage from application_in
      - Create TLSRecord containing ApplicationMessage
    channels:
      - name: application_in
        access: r
    data:
      - name: ApplicationMessage
        access: rw
      - name: NETWORK_OUT.TLSRecord
        access: rw
    transitions:
      - target: NETWORK_OUT.ENCRYPT_AND_SEND

  - name: HEARTBEAT
    desc:
      - Read TLSRecord from heartbeat_in
      - Check TLSRecord for valid heartbeat message
    channels:
      - name: heartbeat_in
        access: r
    data:
      - name: NETWORK_OUT.TLSRecord
        access: rw
    transitions:
      - target: NETWORK_OUT.ENCRYPT_AND_SEND

  - name: NETWORK_OUT.SEND
    desc:
      - Write TLSRecord to network_out
    channels:
      - name: network_out
        access: w
    data:
      - name: NETWORK_OUT.TLSRecord
        access: r
    transitions:
      - target: IDLE

  - name: NETWORK_OUT.ENCRYPT_AND_SEND
    desc:
      - Encrypt TLSRecord to TLSCiphertext with client_write_key
      - Write TLSCiphertext to network_out
      - Increment client_sequence_number
    channels:
      - name: network_out
        access: w
    data:
      - name: NETWORK_OUT.TLSRecord
        access: rw
      - name: client_write_key
        access: r
      - name: TLSCiphertext
        access: rw
      - name: client_sequence_number
        access: rw
    transitions:
      - target: ERROR
        condition: no client_write_key available
      - target: IDLE

  - name: HEARTBEAT_CONTROL
    desc:
      - Read HeartbeatControlMessage from heartbeat_control_in
      - Parse HeartbeatControlMessage
      - Set heartbeat_receive_enabled
      - Set heartbeat_send_enabled
    channels:
      - name: heartbeat_control_in
        access: r
    data:
      - name: HeartbeatControlMessage
        access: rw
      - name: heartbeat_receive_enabled
        access: w
      - name: heartbeat_send_enabled
        access: w
    transitions:
      - target: IDLE

  - name: ERROR
    desc:
      - Inform Handshake layer and client application
    transitions:
      - target: FINAL

  - name: FINAL

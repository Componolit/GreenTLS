initial: START
final: FINAL
states:
  - name: START
    actions:
      - client_sequence_number := 0
      - server_sequence_number := 0
      - record_protection := False
      - network_receive_enabled := True
      - network_send_enabled := True
      - heartbeat_receive_enabled := False
      - heartbeat_send_enabled := False
      - client_write_key_received := False
      - server_write_key_received := False
    transitions:
      - target: IDLE
        condition: True

  - name: IDLE
    transitions:
      - target: IDLE.MESSAGE
        condition: True
  - name: IDLE.MESSAGE
    actions:
      - control_message_received := Message_Available (control_in)
    transitions:
      - target: CONTROL
        condition: control_message_received = True
      - target: IDLE.KEY_UPDATE
        condition: control_message_received = False
  - name: IDLE.KEY_UPDATE
    actions:
      - key_message_received := Message_Available (key_in)
    transitions:
      - target: KEY_UPDATE
        condition: key_message_received = True
      - target: IDLE.HANDSHAKE
        condition: key_message_received = False
  - name: IDLE.HANDSHAKE
    actions:
      - handshake_message_received := Message_Available (handshake_in)
    transitions:
      - target: HANDSHAKE
        condition: handshake_message_received = True
      - target: IDLE.NETWORK
        condition: handshake_message_received = False
  - name: IDLE.NETWORK
    actions:
      - network_message_received := Message_Available (network_in)
    transitions:
      - target: NETWORK_IN
        condition: network_message_received = True and network_receive_enabled = True
      - target: IDLE.APPLICATION
        condition: network_message_received = False or network_receive_enabled = False
  - name: IDLE.APPLICATION
    actions:
      - application_message_received := Message_Available (application_in)
    transitions:
      - target: NETWORK_OUT.APPLICATION
        condition: application_message_received = True
      - target: IDLE.HEARTBEAT
        condition: application_message_received = False
  - name: IDLE.HEARTBEAT
    actions:
      - heartbeat_message_received := Message_Available (heartbeat_in)
    transitions:
      - target: HEARTBEAT
        condition: heartbeat_message_received = True and heartbeat_send_enabled = True
      - target: IDLE.HEARTBEAT_CONTROL
        condition: heartbeat_message_received = False or heartbeat_send_enabled = False
  - name: IDLE.HEARTBEAT_CONTROL
    actions:
      - heartbeat_control_message_received := Message_Available (heartbeat_control_in)
    transitions:
      - target: HEARTBEAT_CONTROL
        condition: heartbeat_control_message_received = True
      - target: IDLE
        condition: heartbeat_control_message_received = False

  - name: CONTROL
    actions:
      - Control_Message := GreenTLS_Control'Read (control_in)
    transitions:
      - target: ERROR
        condition: Control_Message'Valid = False
      - target: SHUTDOWN
        condition: Control_Message'Valid = True and Control_Message.Kind = SHUTDOWN_MESSAGE

  - name: SHUTDOWN
    actions:
      - TLS_Alert'Write (network_out, TLS_Alert (CLOSE_NOTIFY))
      - network_send_enabled := False
    transitions:
      - target: FINAL
        condition: True

  - name: KEY_UPDATE
    actions:
      - Key_Message := GreenTLS_Key_Message'Read (key_in)
    transitions:
      - target: ERROR
        condition: Key_Message'Valid = False
      - target: KEY_UPDATE.CLIENT
        condition: Key_Message'Valid = True and Key_Message.Kind = CLIENT
      - target: KEY_UPDATE.SERVER
        condition: Key_Message'Valid = True and Key_Message.Kind = SERVER

  - name: KEY_UPDATE.CLIENT
    actions:
      - client_write_key := KeyMessage.client_write_key
      - client_write_iv := KeyMessage.client_write_iv
      - client_iv_length := KeyMessage.client_iv_length
      - client_write_key_received := True
      - client_sequence_number := 0
      - record_protection := True
    transitions:
      - target: IDLE
        condition: True

  - name: KEY_UPDATE.SERVER
    actions:
      - server_write_key := KeyMessage.server_write_key
      - server_write_iv := KeyMessage.server_write_iv
      - server_iv_length := KeyMessage.server_iv_length
      - server_write_key_received := True
      - server_sequence_number := 0
    transitions:
      - target: IDLE
        condition: True

  - name: HANDSHAKE
    actions:
      - Handshake_Message := GreenTLS_Handshake_Message'Read (handshake_in)
      - TLS_Record_Message := TLS_Record (HANDSHAKE, Handshake_Message)
    transitions:
      - target: ERROR
        condition: Handshake_Message'Valid = False
      - target: IDLE
        condition: Handshake_Message'Valid = True and network_send_enabled = False
      - target: ERROR
        condition: Handshake_Message'Valid = True and record_protection = True and network_send_enabled = True and client_write_key_received = False
      - target: NETWORK_OUT.SEND
        condition: Handshake_Message'Valid = True and record_protection = False and network_send_enabled = True and client_write_key_received = False
      - target: NETWORK_OUT.ENCRYPT_AND_SEND
        condition: Handshake_Message'Valid = True and record_protection = True and network_send_enabled = True and client_write_key_received = True

  - name: NETWORK_IN
    actions:
      - TLS_Record_Message := TLS_Record'Read (network_in)
    transitions:
      - target: ERROR
        condition: TLS_Record_Message'Valid = False
      - target: ERROR
        condition: TLS_Record_Message'Valid = True and TLS_Record_Message.Tag = APPLICATION_DATA and server_write_key_received = False
      - target: NETWORK_IN.DECRYPT
        condition: TLS_Record_Message'Valid = True and TLS_Record_Message.Tag = APPLICATION_DATA and server_write_key_received = True
      - target: NETWORK_IN.PARSE
        condition: TLS_Record_Message'Valid = True and TLS_Record_Message.Tag = ALERT or TLS_Record_Message.Tag = HANDSHAKE
      - target: NETWORK_IN.HANDSHAKE
        condition: TLS_Record_Message'Valid = True and TLS_Record_Message.Tag = CHANGE_CIPHER_SPEC
      - target: NETWORK_IN.HEARTBEAT
        condition: TLS_Record_Message'Valid = True and TLS_Record_Message.Tag = HEARTBEAT and heartbeat_receive_enabled = True
      - target: IDLE
        condition: TLS_Record_Message'Valid = True and TLS_Record_Message.Tag = HEARTBEAT and heartbeat_receive_enabled = False

  - name: NETWORK_IN.DECRYPT
    actions:
      - TLS_Inner_Plaintext := Decrypt (server_write_key, server_write_iv, server_iv_length, server_sequence_number, TLS_Record_Message)
    transitions:
      - target: ERROR
        condition: TLS_Inner_Plaintext = null
      - target: NETWORK_IN.DECRYPT.VERIFICATION
        condition: TLS_Inner_Plaintext != null
  - name: NETWORK_IN.DECRYPT.VERIFICATION
    actions:
      - Valid_TLS_Inner_Plaintext := Verify_TLS_Inner_Plaintext (TLS_Inner_Plaintext)  # returns False if Handshake or Alert record with zero-length TLS_Inner_Plaintext.content or only padding, no type field found
    transitions:
      - target: ERROR
        condition: Valid_TLS_Inner_Plaintext = False
      - target: NETWORK_IN.PARSE
        condition: Valid_TLS_Inner_Plaintext = True

  - name: NETWORK_IN.PARSE
    actions:
      - TLS_Record_Message := Transform_To_Record_Message (TLS_Inner_Plaintext)
      - server_sequence_number := server_sequence_number + 1
    transitions:
      - target: ERROR
        condition: TLS_Record_Message'Valid = False
      - target: NETWORK_IN.APPLICATION
        condition: TLS_Record_Message.Tag = APPLICATION_DATA
      - target: NETWORK_IN.HANDSHAKE
        condition: TLS_Record_Message.Tag = HANDSHAKE
      - target: NETWORK_IN.ALERT
        condition: TLS_Record_Message.Tag = ALERT
      - target: ERROR
        condition: TLS_Record_Message.Tag = CHANGE_CIPHER_SPEC
      - target: IDLE

  - name: NETWORK_IN.APPLICATION
    actions:
      - GreenTLS_Application_Message'Write (application_out, GreenTLS_Application_Message (TLS_Record_Message.content))
    transitions:
      - target: IDLE
        condition: True

  - name: NETWORK_IN.HANDSHAKE
    actions:
      - GreenTLS_Handshake_Message'Write (handshake_out, GreenTLS_Handshake_Message (TLS_Record_Message.content))
    transitions:
      - target: IDLE
        condition: True

  - name: NETWORK_IN.HEARTBEAT
    actions:
      - GreenTLS_Heartbeat_Message'Write (heartbeat_out, GreenTLS_Heartbeat_Message (TLS_Record_Message.content))
    transitions:
      - target: IDLE
        condition: True

  - name: NETWORK_IN.ALERT
    actions:
      - TLS_Alert_Message := TLS_Record_Message.content
    transitions:
      - target: ERROR
        condition: TLS_Alert_Message'Valid = False
      - target: NETWORK_IN.ALERT.CLOSE
        condition: TLS_Alert_Message'Valid = True and TLS_Alert_Message.Description = CLOSE_NOTIFY
      - target: NETWORK_IN.ALERT.TERMINATE
        condition: TLS_Alert_Message'Valid = True and TLS_Alert_Message.Description != CLOSE_NOTIFY

  - name: NETWORK_IN.ALERT.CLOSE
    actions:
      - network_receive_enabled := False
      - GreenTLS_Control_Message'Write (control_out, GreenTLS_Control_Message (TLS_Alert_Message.Description))
    transitions:
      - target: IDLE
        condition: True

  - name: NETWORK_IN.ALERT.TERMINATE
    actions:
      - GreenTLS_Control_Message'Write (control_out, GreenTLS_Control_Message (TLS_Alert_Message.Description))
    transitions:
      - target: ERROR
        condition: True

  - name: NETWORK_OUT.APPLICATION
    actions:
      - Application_Message := GreenTLS_Application_Message'Read (application_in)
      - TLS_Record_Message := TLS_Record (APPLICATION, Application_Message.Data)
    transitions:
      - target: NETWORK_OUT.ENCRYPT_AND_SEND
        condition: True

  - name: HEARTBEAT
    actions:
      - TLS_Record_Message := TLS_Record (HEARTBEAT, GreenTLS_Heartbeat_Message'Read (heartbeat_in))
    transitions:
      - target: NETWORK_OUT.ENCRYPT_AND_SEND
        condition: True

  - name: NETWORK_OUT.SEND
    actions:
      - TLS_Record'Write (network_out, TLS_Record_Message)
    transitions:
      - target: IDLE
        condition: True

  - name: NETWORK_OUT.ENCRYPT_AND_SEND
    actions:
      - TLS_Ciphertext_Message := Encrypt (client_write_key, client_write_iv, client_iv_length, client_sequence_number, TLS_Record_Message)
      - TLS_Record'Write (network_out, TLS_Ciphertext_Message)
      - client_sequence_number := client_sequence_number + 1
    transitions:
      - target: IDLE
        condition: True

  - name: HEARTBEAT_CONTROL
    actions:
      - Heartbeat_Control_Message := GreenTLS_Heartbeat_Control_Message'Read (heartbeat_control_in)
      - heartbeat_receive_enabled := True
      - heartbeat_send_enabled := True
    transitions:
      - target: ERROR
        condition: Heartbeat_Control_Message'Valid = False
      - target: IDLE
        condition: Heartbeat_Control_Message'Valid = True

  - name: ERROR
    actions:
      - GreenTLS_Control_Message'Write (control_out, GreenTLS_Control_Message (TYPE))  # FIXME: replace TYPE
    transitions:
      - target: FINAL
        condition: True

  - name: FINAL

constants:
  - SHUTDOWN_MESSAGE
  - CLOSE_NOTIFY
  - APPLICATION_DATA
  - ALERT
  - HANDSHAKE
  - CHANGE_CIPHER_SPEC
  - HEARTBEAT
  - APPLICATION
